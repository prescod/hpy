
#    DO NOT EDIT THIS FILE!

#    This file is automatically generated by hpy.tools.autogen.pyUU_decls_and_stubs.autogen_python_fallbacks
#    See also hpy.tools.autogen and hpy/tools/public_api.h

#    Run this to regenerate:
#        make autogen


from wasmer import Type

from PyUU.wasm_helpers import WasmFunctions


fallback_functions = WasmFunctions()

    
@fallback_functions.add()  # HPy HPyModule_Create(HPyContext ctx, HPyModuleDef *def)
def HPyModule_Create(runtime, ctx: int, _def: int) -> int:
    raise NotImplementedError(HPyModule_Create)

@fallback_functions.add()  # HPy HPy_Dup(HPyContext ctx, HPy h)
def HPy_Dup(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPy_Dup)

@fallback_functions.add()  # void HPy_Close(HPyContext ctx, HPy h)
def HPy_Close(runtime, ctx: int, h: int):
    raise NotImplementedError(HPy_Close)

@fallback_functions.add()  # HPy HPyLong_FromLong(HPyContext ctx, long value)
def HPyLong_FromLong(runtime, ctx: int, value: int) -> int:
    raise NotImplementedError(HPyLong_FromLong)

@fallback_functions.add()  # HPy HPyLong_FromUnsignedLong(HPyContext ctx, unsigned long value)
def HPyLong_FromUnsignedLong(runtime, ctx: int, value: int) -> int:
    raise NotImplementedError(HPyLong_FromUnsignedLong)

@fallback_functions.add()  # HPy HPyLong_FromLongLong(HPyContext ctx, long long v)
def HPyLong_FromLongLong(runtime, ctx: int, v: int) -> int:
    raise NotImplementedError(HPyLong_FromLongLong)

@fallback_functions.add()  # HPy HPyLong_FromUnsignedLongLong(HPyContext ctx, unsigned long long v)
def HPyLong_FromUnsignedLongLong(runtime, ctx: int, v: int) -> int:
    raise NotImplementedError(HPyLong_FromUnsignedLongLong)

@fallback_functions.add()  # HPy HPyLong_FromSize_t(HPyContext ctx, size_t value)
def HPyLong_FromSize_t(runtime, ctx: int, value: int) -> int:
    raise NotImplementedError(HPyLong_FromSize_t)

@fallback_functions.add()  # HPy HPyLong_FromSsize_t(HPyContext ctx, HPy_ssize_t value)
def HPyLong_FromSsize_t(runtime, ctx: int, value: int) -> int:
    raise NotImplementedError(HPyLong_FromSsize_t)

@fallback_functions.add()  # long HPyLong_AsLong(HPyContext ctx, HPy h)
def HPyLong_AsLong(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyLong_AsLong)

@fallback_functions.add()  # unsigned long HPyLong_AsUnsignedLong(HPyContext ctx, HPy h)
def HPyLong_AsUnsignedLong(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyLong_AsUnsignedLong)

@fallback_functions.add()  # unsigned long HPyLong_AsUnsignedLongMask(HPyContext ctx, HPy h)
def HPyLong_AsUnsignedLongMask(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyLong_AsUnsignedLongMask)

## not supported for now Function(name='HPyLong_AsLongLong', cpython_name='PyLong_AsLongLong')
## not supported for now Function(name='HPyLong_AsUnsignedLongLong', cpython_name='PyLong_AsUnsignedLongLong')
## not supported for now Function(name='HPyLong_AsUnsignedLongLongMask', cpython_name='PyLong_AsUnsignedLongLongMask')
@fallback_functions.add()  # size_t HPyLong_AsSize_t(HPyContext ctx, HPy h)
def HPyLong_AsSize_t(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyLong_AsSize_t)

@fallback_functions.add()  # HPy_ssize_t HPyLong_AsSsize_t(HPyContext ctx, HPy h)
def HPyLong_AsSsize_t(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyLong_AsSsize_t)

@fallback_functions.add()  # HPy HPyFloat_FromDouble(HPyContext ctx, double v)
def HPyFloat_FromDouble(runtime, ctx: int, v: int) -> int:
    raise NotImplementedError(HPyFloat_FromDouble)

@fallback_functions.add()  # double HPyFloat_AsDouble(HPyContext ctx, HPy h)
def HPyFloat_AsDouble(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyFloat_AsDouble)

@fallback_functions.add()  # HPy_ssize_t HPy_Length(HPyContext ctx, HPy h)
def HPy_Length(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPy_Length)

@fallback_functions.add()  # int HPyNumber_Check(HPyContext ctx, HPy h)
def HPyNumber_Check(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyNumber_Check)

@fallback_functions.add()  # HPy HPy_Add(HPyContext ctx, HPy h1, HPy h2)
def HPy_Add(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Add)

@fallback_functions.add()  # HPy HPy_Subtract(HPyContext ctx, HPy h1, HPy h2)
def HPy_Subtract(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Subtract)

@fallback_functions.add()  # HPy HPy_Multiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_Multiply(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Multiply)

@fallback_functions.add()  # HPy HPy_MatrixMultiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_MatrixMultiply(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_MatrixMultiply)

@fallback_functions.add()  # HPy HPy_FloorDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_FloorDivide(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_FloorDivide)

@fallback_functions.add()  # HPy HPy_TrueDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_TrueDivide(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_TrueDivide)

@fallback_functions.add()  # HPy HPy_Remainder(HPyContext ctx, HPy h1, HPy h2)
def HPy_Remainder(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Remainder)

@fallback_functions.add()  # HPy HPy_Divmod(HPyContext ctx, HPy h1, HPy h2)
def HPy_Divmod(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Divmod)

@fallback_functions.add()  # HPy HPy_Power(HPyContext ctx, HPy h1, HPy h2, HPy h3)
def HPy_Power(runtime, ctx: int, h1: int, h2: int, h3: int) -> int:
    raise NotImplementedError(HPy_Power)

@fallback_functions.add()  # HPy HPy_Negative(HPyContext ctx, HPy h1)
def HPy_Negative(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Negative)

@fallback_functions.add()  # HPy HPy_Positive(HPyContext ctx, HPy h1)
def HPy_Positive(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Positive)

@fallback_functions.add()  # HPy HPy_Absolute(HPyContext ctx, HPy h1)
def HPy_Absolute(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Absolute)

@fallback_functions.add()  # HPy HPy_Invert(HPyContext ctx, HPy h1)
def HPy_Invert(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Invert)

@fallback_functions.add()  # HPy HPy_Lshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_Lshift(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Lshift)

@fallback_functions.add()  # HPy HPy_Rshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_Rshift(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Rshift)

@fallback_functions.add()  # HPy HPy_And(HPyContext ctx, HPy h1, HPy h2)
def HPy_And(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_And)

@fallback_functions.add()  # HPy HPy_Xor(HPyContext ctx, HPy h1, HPy h2)
def HPy_Xor(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Xor)

@fallback_functions.add()  # HPy HPy_Or(HPyContext ctx, HPy h1, HPy h2)
def HPy_Or(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_Or)

@fallback_functions.add()  # HPy HPy_Index(HPyContext ctx, HPy h1)
def HPy_Index(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Index)

@fallback_functions.add()  # HPy HPy_Long(HPyContext ctx, HPy h1)
def HPy_Long(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Long)

@fallback_functions.add()  # HPy HPy_Float(HPyContext ctx, HPy h1)
def HPy_Float(runtime, ctx: int, h1: int) -> int:
    raise NotImplementedError(HPy_Float)

@fallback_functions.add()  # HPy HPy_InPlaceAdd(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceAdd(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceAdd)

@fallback_functions.add()  # HPy HPy_InPlaceSubtract(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceSubtract(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceSubtract)

@fallback_functions.add()  # HPy HPy_InPlaceMultiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceMultiply(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceMultiply)

@fallback_functions.add()  # HPy HPy_InPlaceMatrixMultiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceMatrixMultiply(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceMatrixMultiply)

@fallback_functions.add()  # HPy HPy_InPlaceFloorDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceFloorDivide(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceFloorDivide)

@fallback_functions.add()  # HPy HPy_InPlaceTrueDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceTrueDivide(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceTrueDivide)

@fallback_functions.add()  # HPy HPy_InPlaceRemainder(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceRemainder(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceRemainder)

@fallback_functions.add()  # HPy HPy_InPlacePower(HPyContext ctx, HPy h1, HPy h2, HPy h3)
def HPy_InPlacePower(runtime, ctx: int, h1: int, h2: int, h3: int) -> int:
    raise NotImplementedError(HPy_InPlacePower)

@fallback_functions.add()  # HPy HPy_InPlaceLshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceLshift(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceLshift)

@fallback_functions.add()  # HPy HPy_InPlaceRshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceRshift(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceRshift)

@fallback_functions.add()  # HPy HPy_InPlaceAnd(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceAnd(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceAnd)

@fallback_functions.add()  # HPy HPy_InPlaceXor(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceXor(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceXor)

@fallback_functions.add()  # HPy HPy_InPlaceOr(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceOr(runtime, ctx: int, h1: int, h2: int) -> int:
    raise NotImplementedError(HPy_InPlaceOr)

@fallback_functions.add()  # void HPyErr_SetString(HPyContext ctx, HPy h_type, const char *message)
def HPyErr_SetString(runtime, ctx: int, h_type: int, message: int):
    raise NotImplementedError(HPyErr_SetString)

@fallback_functions.add()  # void HPyErr_SetObject(HPyContext ctx, HPy h_type, HPy h_value)
def HPyErr_SetObject(runtime, ctx: int, h_type: int, h_value: int):
    raise NotImplementedError(HPyErr_SetObject)

@fallback_functions.add()  # int HPyErr_Occurred(HPyContext ctx)
def HPyErr_Occurred(runtime, ctx: int) -> int:
    raise NotImplementedError(HPyErr_Occurred)

@fallback_functions.add()  # HPy HPyErr_NoMemory(HPyContext ctx)
def HPyErr_NoMemory(runtime, ctx: int) -> int:
    raise NotImplementedError(HPyErr_NoMemory)

@fallback_functions.add()  # void HPyErr_Clear(HPyContext ctx)
def HPyErr_Clear(runtime, ctx: int):
    raise NotImplementedError(HPyErr_Clear)

@fallback_functions.add()  # int HPy_IsTrue(HPyContext ctx, HPy h)
def HPy_IsTrue(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPy_IsTrue)

@fallback_functions.add()  # HPy HPyType_FromSpec(HPyContext ctx, HPyType_Spec *spec, HPyType_SpecParam *params)
def HPyType_FromSpec(runtime, ctx: int, spec: int, params: int) -> int:
    raise NotImplementedError(HPyType_FromSpec)

@fallback_functions.add()  # HPy HPyType_GenericNew(HPyContext ctx, HPy type, HPy *args, HPy_ssize_t nargs, HPy kw)
def HPyType_GenericNew(runtime, ctx: int, type: int, args: int, nargs: int, kw: int) -> int:
    raise NotImplementedError(HPyType_GenericNew)

@fallback_functions.add()  # HPy HPy_GetAttr(HPyContext ctx, HPy obj, HPy name)
def HPy_GetAttr(runtime, ctx: int, obj: int, name: int) -> int:
    raise NotImplementedError(HPy_GetAttr)

@fallback_functions.add()  # HPy HPy_GetAttr_s(HPyContext ctx, HPy obj, const char *name)
def HPy_GetAttr_s(runtime, ctx: int, obj: int, name: int) -> int:
    raise NotImplementedError(HPy_GetAttr_s)

@fallback_functions.add()  # int HPy_HasAttr(HPyContext ctx, HPy obj, HPy name)
def HPy_HasAttr(runtime, ctx: int, obj: int, name: int) -> int:
    raise NotImplementedError(HPy_HasAttr)

@fallback_functions.add()  # int HPy_HasAttr_s(HPyContext ctx, HPy obj, const char *name)
def HPy_HasAttr_s(runtime, ctx: int, obj: int, name: int) -> int:
    raise NotImplementedError(HPy_HasAttr_s)

@fallback_functions.add()  # int HPy_SetAttr(HPyContext ctx, HPy obj, HPy name, HPy value)
def HPy_SetAttr(runtime, ctx: int, obj: int, name: int, value: int) -> int:
    raise NotImplementedError(HPy_SetAttr)

@fallback_functions.add()  # int HPy_SetAttr_s(HPyContext ctx, HPy obj, const char *name, HPy value)
def HPy_SetAttr_s(runtime, ctx: int, obj: int, name: int, value: int) -> int:
    raise NotImplementedError(HPy_SetAttr_s)

@fallback_functions.add()  # HPy HPy_GetItem(HPyContext ctx, HPy obj, HPy key)
def HPy_GetItem(runtime, ctx: int, obj: int, key: int) -> int:
    raise NotImplementedError(HPy_GetItem)

@fallback_functions.add()  # HPy HPy_GetItem_i(HPyContext ctx, HPy obj, HPy_ssize_t idx)
def HPy_GetItem_i(runtime, ctx: int, obj: int, idx: int) -> int:
    raise NotImplementedError(HPy_GetItem_i)

@fallback_functions.add()  # HPy HPy_GetItem_s(HPyContext ctx, HPy obj, const char *key)
def HPy_GetItem_s(runtime, ctx: int, obj: int, key: int) -> int:
    raise NotImplementedError(HPy_GetItem_s)

@fallback_functions.add()  # int HPy_SetItem(HPyContext ctx, HPy obj, HPy key, HPy value)
def HPy_SetItem(runtime, ctx: int, obj: int, key: int, value: int) -> int:
    raise NotImplementedError(HPy_SetItem)

@fallback_functions.add()  # int HPy_SetItem_i(HPyContext ctx, HPy obj, HPy_ssize_t idx, HPy value)
def HPy_SetItem_i(runtime, ctx: int, obj: int, idx: int, value: int) -> int:
    raise NotImplementedError(HPy_SetItem_i)

@fallback_functions.add()  # int HPy_SetItem_s(HPyContext ctx, HPy obj, const char *key, HPy value)
def HPy_SetItem_s(runtime, ctx: int, obj: int, key: int, value: int) -> int:
    raise NotImplementedError(HPy_SetItem_s)

@fallback_functions.add()  # void *_HPy_Cast(HPyContext ctx, HPy h)
def _HPy_Cast(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(_HPy_Cast)

@fallback_functions.add()  # HPy _HPy_New(HPyContext ctx, HPy h_type, void **data)
def _HPy_New(runtime, ctx: int, h_type: int, data: int) -> int:
    raise NotImplementedError(_HPy_New)

@fallback_functions.add()  # HPy HPy_Repr(HPyContext ctx, HPy obj)
def HPy_Repr(runtime, ctx: int, obj: int) -> int:
    raise NotImplementedError(HPy_Repr)

@fallback_functions.add()  # HPy HPy_Str(HPyContext ctx, HPy obj)
def HPy_Str(runtime, ctx: int, obj: int) -> int:
    raise NotImplementedError(HPy_Str)

@fallback_functions.add()  # HPy HPy_ASCII(HPyContext ctx, HPy obj)
def HPy_ASCII(runtime, ctx: int, obj: int) -> int:
    raise NotImplementedError(HPy_ASCII)

@fallback_functions.add()  # HPy HPy_Bytes(HPyContext ctx, HPy obj)
def HPy_Bytes(runtime, ctx: int, obj: int) -> int:
    raise NotImplementedError(HPy_Bytes)

@fallback_functions.add()  # HPy HPy_RichCompare(HPyContext ctx, HPy v, HPy w, int op)
def HPy_RichCompare(runtime, ctx: int, v: int, w: int, op: int) -> int:
    raise NotImplementedError(HPy_RichCompare)

@fallback_functions.add()  # int HPy_RichCompareBool(HPyContext ctx, HPy v, HPy w, int op)
def HPy_RichCompareBool(runtime, ctx: int, v: int, w: int, op: int) -> int:
    raise NotImplementedError(HPy_RichCompareBool)

@fallback_functions.add()  # HPy_hash_t HPy_Hash(HPyContext ctx, HPy obj)
def HPy_Hash(runtime, ctx: int, obj: int) -> int:
    raise NotImplementedError(HPy_Hash)

@fallback_functions.add()  # int HPyBytes_Check(HPyContext ctx, HPy h)
def HPyBytes_Check(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyBytes_Check)

@fallback_functions.add()  # HPy_ssize_t HPyBytes_Size(HPyContext ctx, HPy h)
def HPyBytes_Size(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyBytes_Size)

@fallback_functions.add()  # HPy_ssize_t HPyBytes_GET_SIZE(HPyContext ctx, HPy h)
def HPyBytes_GET_SIZE(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyBytes_GET_SIZE)

@fallback_functions.add()  # char *HPyBytes_AsString(HPyContext ctx, HPy h)
def HPyBytes_AsString(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyBytes_AsString)

@fallback_functions.add()  # char *HPyBytes_AS_STRING(HPyContext ctx, HPy h)
def HPyBytes_AS_STRING(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyBytes_AS_STRING)

@fallback_functions.add()  # HPy HPyBytes_FromString(HPyContext ctx, const char *v)
def HPyBytes_FromString(runtime, ctx: int, v: int) -> int:
    raise NotImplementedError(HPyBytes_FromString)

@fallback_functions.add()  # HPy HPyBytes_FromStringAndSize(HPyContext ctx, const char *v, HPy_ssize_t len)
def HPyBytes_FromStringAndSize(runtime, ctx: int, v: int, len: int) -> int:
    raise NotImplementedError(HPyBytes_FromStringAndSize)

@fallback_functions.add()  # HPy HPyUnicode_FromString(HPyContext ctx, const char *utf8)
def HPyUnicode_FromString(runtime, ctx: int, utf8: int) -> int:
    raise NotImplementedError(HPyUnicode_FromString)

@fallback_functions.add()  # int HPyUnicode_Check(HPyContext ctx, HPy h)
def HPyUnicode_Check(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyUnicode_Check)

@fallback_functions.add()  # HPy HPyUnicode_AsUTF8String(HPyContext ctx, HPy h)
def HPyUnicode_AsUTF8String(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyUnicode_AsUTF8String)

@fallback_functions.add()  # HPy HPyUnicode_FromWideChar(HPyContext ctx, const wchar_t *w, HPy_ssize_t size)
def HPyUnicode_FromWideChar(runtime, ctx: int, w: int, size: int) -> int:
    raise NotImplementedError(HPyUnicode_FromWideChar)

@fallback_functions.add()  # int HPyList_Check(HPyContext ctx, HPy h)
def HPyList_Check(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyList_Check)

@fallback_functions.add()  # HPy HPyList_New(HPyContext ctx, HPy_ssize_t len)
def HPyList_New(runtime, ctx: int, len: int) -> int:
    raise NotImplementedError(HPyList_New)

@fallback_functions.add()  # int HPyList_Append(HPyContext ctx, HPy h_list, HPy h_item)
def HPyList_Append(runtime, ctx: int, h_list: int, h_item: int) -> int:
    raise NotImplementedError(HPyList_Append)

@fallback_functions.add()  # int HPyDict_Check(HPyContext ctx, HPy h)
def HPyDict_Check(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPyDict_Check)

@fallback_functions.add()  # HPy HPyDict_New(HPyContext ctx)
def HPyDict_New(runtime, ctx: int) -> int:
    raise NotImplementedError(HPyDict_New)

@fallback_functions.add()  # void HPy_FatalError(HPyContext ctx, const char *message)
def HPy_FatalError(runtime, ctx: int, message: int):
    raise NotImplementedError(HPy_FatalError)

@fallback_functions.add()  # HPy HPyTuple_FromArray(HPyContext ctx, HPy items[], HPy_ssize_t n)
def HPyTuple_FromArray(runtime, ctx: int, items: int, n: int) -> int:
    raise NotImplementedError(HPyTuple_FromArray)

@fallback_functions.add()  # HPy HPy_FromPyObject(HPyContext ctx, cpy_PyObject *obj)
def HPy_FromPyObject(runtime, ctx: int, obj: int) -> int:
    raise NotImplementedError(HPy_FromPyObject)

@fallback_functions.add()  # cpy_PyObject *HPy_AsPyObject(HPyContext ctx, HPy h)
def HPy_AsPyObject(runtime, ctx: int, h: int) -> int:
    raise NotImplementedError(HPy_AsPyObject)

@fallback_functions.add()  # void _HPy_CallRealFunctionFromTrampoline(HPyContext ctx, HPyFunc_Signature sig, void *func, void *args)
def _HPy_CallRealFunctionFromTrampoline(runtime, ctx: int, sig: int, func: int, args: int):
    raise NotImplementedError(_HPy_CallRealFunctionFromTrampoline)

@fallback_functions.add()  # void _HPy_CallDestroyAndThenDealloc(HPyContext ctx, void *func, cpy_PyObject *self)
def _HPy_CallDestroyAndThenDealloc(runtime, ctx: int, func: int, self: int):
    raise NotImplementedError(_HPy_CallDestroyAndThenDealloc)

@fallback_functions.add()  # HPyListBuilder HPyListBuilder_New(HPyContext ctx, HPy_ssize_t initial_size)
def HPyListBuilder_New(runtime, ctx: int, initial_size: int) -> int:
    raise NotImplementedError(HPyListBuilder_New)

@fallback_functions.add()  # void HPyListBuilder_Set(HPyContext ctx, HPyListBuilder builder, HPy_ssize_t index, HPy h_item)
def HPyListBuilder_Set(runtime, ctx: int, builder: int, index: int, h_item: int):
    raise NotImplementedError(HPyListBuilder_Set)

@fallback_functions.add()  # HPy HPyListBuilder_Build(HPyContext ctx, HPyListBuilder builder)
def HPyListBuilder_Build(runtime, ctx: int, builder: int) -> int:
    raise NotImplementedError(HPyListBuilder_Build)

@fallback_functions.add()  # void HPyListBuilder_Cancel(HPyContext ctx, HPyListBuilder builder)
def HPyListBuilder_Cancel(runtime, ctx: int, builder: int):
    raise NotImplementedError(HPyListBuilder_Cancel)

@fallback_functions.add()  # HPyTupleBuilder HPyTupleBuilder_New(HPyContext ctx, HPy_ssize_t initial_size)
def HPyTupleBuilder_New(runtime, ctx: int, initial_size: int) -> int:
    raise NotImplementedError(HPyTupleBuilder_New)

@fallback_functions.add()  # void HPyTupleBuilder_Set(HPyContext ctx, HPyTupleBuilder builder, HPy_ssize_t index, HPy h_item)
def HPyTupleBuilder_Set(runtime, ctx: int, builder: int, index: int, h_item: int):
    raise NotImplementedError(HPyTupleBuilder_Set)

@fallback_functions.add()  # HPy HPyTupleBuilder_Build(HPyContext ctx, HPyTupleBuilder builder)
def HPyTupleBuilder_Build(runtime, ctx: int, builder: int) -> int:
    raise NotImplementedError(HPyTupleBuilder_Build)

@fallback_functions.add()  # void HPyTupleBuilder_Cancel(HPyContext ctx, HPyTupleBuilder builder)
def HPyTupleBuilder_Cancel(runtime, ctx: int, builder: int):
    raise NotImplementedError(HPyTupleBuilder_Cancel)

@fallback_functions.add()  # HPyTracker HPyTracker_New(HPyContext ctx, HPy_ssize_t size)
def HPyTracker_New(runtime, ctx: int, size: int) -> int:
    raise NotImplementedError(HPyTracker_New)

@fallback_functions.add()  # int HPyTracker_Add(HPyContext ctx, HPyTracker ht, HPy h)
def HPyTracker_Add(runtime, ctx: int, ht: int, h: int) -> int:
    raise NotImplementedError(HPyTracker_Add)

@fallback_functions.add()  # void HPyTracker_ForgetAll(HPyContext ctx, HPyTracker ht)
def HPyTracker_ForgetAll(runtime, ctx: int, ht: int):
    raise NotImplementedError(HPyTracker_ForgetAll)

@fallback_functions.add()  # void HPyTracker_Close(HPyContext ctx, HPyTracker ht)
def HPyTracker_Close(runtime, ctx: int, ht: int):
    raise NotImplementedError(HPyTracker_Close)

