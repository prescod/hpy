
/*
   DO NOT EDIT THIS FILE!

   This file is automatically generated by hpy.tools.autogen.pyUU_decls_and_stubs.autogen_python_fallbacks
   See also hpy.tools.autogen and hpy/tools/public_api.h

   Run this to regenerate:
       make autogen

*/

@API.func()  # HPy HPyModule_Create(HPyContext ctx, HPyModuleDef *def)
def HPyModule_Create(ctx, _def) -> int:
    raise NotImplementedError(HPyModule_Create)

@API.func()  # HPy HPy_Dup(HPyContext ctx, HPy h)
def HPy_Dup(ctx, h) -> int:
    raise NotImplementedError(HPy_Dup)

@API.func()  # void HPy_Close(HPyContext ctx, HPy h)
def HPy_Close(ctx, h) -> None:
    raise NotImplementedError(HPy_Close)

@API.func()  # HPy HPyLong_FromLong(HPyContext ctx, long value)
def HPyLong_FromLong(ctx, value) -> int:
    raise NotImplementedError(HPyLong_FromLong)

@API.func()  # HPy HPyLong_FromUnsignedLong(HPyContext ctx, unsigned long value)
def HPyLong_FromUnsignedLong(ctx, value) -> int:
    raise NotImplementedError(HPyLong_FromUnsignedLong)

@API.func()  # HPy HPyLong_FromLongLong(HPyContext ctx, long long v)
def HPyLong_FromLongLong(ctx, v) -> int:
    raise NotImplementedError(HPyLong_FromLongLong)

@API.func()  # HPy HPyLong_FromUnsignedLongLong(HPyContext ctx, unsigned long long v)
def HPyLong_FromUnsignedLongLong(ctx, v) -> int:
    raise NotImplementedError(HPyLong_FromUnsignedLongLong)

@API.func()  # HPy HPyLong_FromSize_t(HPyContext ctx, size_t value)
def HPyLong_FromSize_t(ctx, value) -> int:
    raise NotImplementedError(HPyLong_FromSize_t)

@API.func()  # HPy HPyLong_FromSsize_t(HPyContext ctx, HPy_ssize_t value)
def HPyLong_FromSsize_t(ctx, value) -> int:
    raise NotImplementedError(HPyLong_FromSsize_t)

@API.func()  # long HPyLong_AsLong(HPyContext ctx, HPy h)
def HPyLong_AsLong(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsLong)

@API.func()  # unsigned long HPyLong_AsUnsignedLong(HPyContext ctx, HPy h)
def HPyLong_AsUnsignedLong(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsUnsignedLong)

@API.func()  # unsigned long HPyLong_AsUnsignedLongMask(HPyContext ctx, HPy h)
def HPyLong_AsUnsignedLongMask(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsUnsignedLongMask)

@API.func()  # long long HPyLong_AsLongLong(HPyContext ctx, HPy h)
def HPyLong_AsLongLong(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsLongLong)

@API.func()  # unsigned long long HPyLong_AsUnsignedLongLong(HPyContext ctx, HPy h)
def HPyLong_AsUnsignedLongLong(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsUnsignedLongLong)

@API.func()  # unsigned long long HPyLong_AsUnsignedLongLongMask(HPyContext ctx, HPy h)
def HPyLong_AsUnsignedLongLongMask(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsUnsignedLongLongMask)

@API.func()  # size_t HPyLong_AsSize_t(HPyContext ctx, HPy h)
def HPyLong_AsSize_t(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsSize_t)

@API.func()  # HPy_ssize_t HPyLong_AsSsize_t(HPyContext ctx, HPy h)
def HPyLong_AsSsize_t(ctx, h) -> int:
    raise NotImplementedError(HPyLong_AsSsize_t)

@API.func()  # HPy HPyFloat_FromDouble(HPyContext ctx, double v)
def HPyFloat_FromDouble(ctx, v) -> int:
    raise NotImplementedError(HPyFloat_FromDouble)

@API.func()  # double HPyFloat_AsDouble(HPyContext ctx, HPy h)
def HPyFloat_AsDouble(ctx, h) -> int:
    raise NotImplementedError(HPyFloat_AsDouble)

@API.func()  # HPy_ssize_t HPy_Length(HPyContext ctx, HPy h)
def HPy_Length(ctx, h) -> int:
    raise NotImplementedError(HPy_Length)

@API.func()  # int HPyNumber_Check(HPyContext ctx, HPy h)
def HPyNumber_Check(ctx, h) -> int:
    raise NotImplementedError(HPyNumber_Check)

@API.func()  # HPy HPy_Add(HPyContext ctx, HPy h1, HPy h2)
def HPy_Add(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Add)

@API.func()  # HPy HPy_Subtract(HPyContext ctx, HPy h1, HPy h2)
def HPy_Subtract(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Subtract)

@API.func()  # HPy HPy_Multiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_Multiply(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Multiply)

@API.func()  # HPy HPy_MatrixMultiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_MatrixMultiply(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_MatrixMultiply)

@API.func()  # HPy HPy_FloorDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_FloorDivide(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_FloorDivide)

@API.func()  # HPy HPy_TrueDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_TrueDivide(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_TrueDivide)

@API.func()  # HPy HPy_Remainder(HPyContext ctx, HPy h1, HPy h2)
def HPy_Remainder(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Remainder)

@API.func()  # HPy HPy_Divmod(HPyContext ctx, HPy h1, HPy h2)
def HPy_Divmod(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Divmod)

@API.func()  # HPy HPy_Power(HPyContext ctx, HPy h1, HPy h2, HPy h3)
def HPy_Power(ctx, h1, h2, h3) -> int:
    raise NotImplementedError(HPy_Power)

@API.func()  # HPy HPy_Negative(HPyContext ctx, HPy h1)
def HPy_Negative(ctx, h1) -> int:
    raise NotImplementedError(HPy_Negative)

@API.func()  # HPy HPy_Positive(HPyContext ctx, HPy h1)
def HPy_Positive(ctx, h1) -> int:
    raise NotImplementedError(HPy_Positive)

@API.func()  # HPy HPy_Absolute(HPyContext ctx, HPy h1)
def HPy_Absolute(ctx, h1) -> int:
    raise NotImplementedError(HPy_Absolute)

@API.func()  # HPy HPy_Invert(HPyContext ctx, HPy h1)
def HPy_Invert(ctx, h1) -> int:
    raise NotImplementedError(HPy_Invert)

@API.func()  # HPy HPy_Lshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_Lshift(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Lshift)

@API.func()  # HPy HPy_Rshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_Rshift(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Rshift)

@API.func()  # HPy HPy_And(HPyContext ctx, HPy h1, HPy h2)
def HPy_And(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_And)

@API.func()  # HPy HPy_Xor(HPyContext ctx, HPy h1, HPy h2)
def HPy_Xor(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Xor)

@API.func()  # HPy HPy_Or(HPyContext ctx, HPy h1, HPy h2)
def HPy_Or(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_Or)

@API.func()  # HPy HPy_Index(HPyContext ctx, HPy h1)
def HPy_Index(ctx, h1) -> int:
    raise NotImplementedError(HPy_Index)

@API.func()  # HPy HPy_Long(HPyContext ctx, HPy h1)
def HPy_Long(ctx, h1) -> int:
    raise NotImplementedError(HPy_Long)

@API.func()  # HPy HPy_Float(HPyContext ctx, HPy h1)
def HPy_Float(ctx, h1) -> int:
    raise NotImplementedError(HPy_Float)

@API.func()  # HPy HPy_InPlaceAdd(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceAdd(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceAdd)

@API.func()  # HPy HPy_InPlaceSubtract(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceSubtract(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceSubtract)

@API.func()  # HPy HPy_InPlaceMultiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceMultiply(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceMultiply)

@API.func()  # HPy HPy_InPlaceMatrixMultiply(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceMatrixMultiply(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceMatrixMultiply)

@API.func()  # HPy HPy_InPlaceFloorDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceFloorDivide(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceFloorDivide)

@API.func()  # HPy HPy_InPlaceTrueDivide(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceTrueDivide(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceTrueDivide)

@API.func()  # HPy HPy_InPlaceRemainder(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceRemainder(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceRemainder)

@API.func()  # HPy HPy_InPlacePower(HPyContext ctx, HPy h1, HPy h2, HPy h3)
def HPy_InPlacePower(ctx, h1, h2, h3) -> int:
    raise NotImplementedError(HPy_InPlacePower)

@API.func()  # HPy HPy_InPlaceLshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceLshift(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceLshift)

@API.func()  # HPy HPy_InPlaceRshift(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceRshift(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceRshift)

@API.func()  # HPy HPy_InPlaceAnd(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceAnd(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceAnd)

@API.func()  # HPy HPy_InPlaceXor(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceXor(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceXor)

@API.func()  # HPy HPy_InPlaceOr(HPyContext ctx, HPy h1, HPy h2)
def HPy_InPlaceOr(ctx, h1, h2) -> int:
    raise NotImplementedError(HPy_InPlaceOr)

@API.func()  # void HPyErr_SetString(HPyContext ctx, HPy h_type, const char *message)
def HPyErr_SetString(ctx, h_type, message) -> None:
    raise NotImplementedError(HPyErr_SetString)

@API.func()  # void HPyErr_SetObject(HPyContext ctx, HPy h_type, HPy h_value)
def HPyErr_SetObject(ctx, h_type, h_value) -> None:
    raise NotImplementedError(HPyErr_SetObject)

@API.func()  # int HPyErr_Occurred(HPyContext ctx)
def HPyErr_Occurred(ctx) -> int:
    raise NotImplementedError(HPyErr_Occurred)

@API.func()  # HPy HPyErr_NoMemory(HPyContext ctx)
def HPyErr_NoMemory(ctx) -> int:
    raise NotImplementedError(HPyErr_NoMemory)

@API.func()  # void HPyErr_Clear(HPyContext ctx)
def HPyErr_Clear(ctx) -> None:
    raise NotImplementedError(HPyErr_Clear)

@API.func()  # int HPy_IsTrue(HPyContext ctx, HPy h)
def HPy_IsTrue(ctx, h) -> int:
    raise NotImplementedError(HPy_IsTrue)

@API.func()  # HPy HPyType_FromSpec(HPyContext ctx, HPyType_Spec *spec, HPyType_SpecParam *params)
def HPyType_FromSpec(ctx, spec, params) -> int:
    raise NotImplementedError(HPyType_FromSpec)

@API.func()  # HPy HPyType_GenericNew(HPyContext ctx, HPy type, HPy *args, HPy_ssize_t nargs, HPy kw)
def HPyType_GenericNew(ctx, type, args, nargs, kw) -> int:
    raise NotImplementedError(HPyType_GenericNew)

@API.func()  # HPy HPy_GetAttr(HPyContext ctx, HPy obj, HPy name)
def HPy_GetAttr(ctx, obj, name) -> int:
    raise NotImplementedError(HPy_GetAttr)

@API.func()  # HPy HPy_GetAttr_s(HPyContext ctx, HPy obj, const char *name)
def HPy_GetAttr_s(ctx, obj, name) -> int:
    raise NotImplementedError(HPy_GetAttr_s)

@API.func()  # int HPy_HasAttr(HPyContext ctx, HPy obj, HPy name)
def HPy_HasAttr(ctx, obj, name) -> int:
    raise NotImplementedError(HPy_HasAttr)

@API.func()  # int HPy_HasAttr_s(HPyContext ctx, HPy obj, const char *name)
def HPy_HasAttr_s(ctx, obj, name) -> int:
    raise NotImplementedError(HPy_HasAttr_s)

@API.func()  # int HPy_SetAttr(HPyContext ctx, HPy obj, HPy name, HPy value)
def HPy_SetAttr(ctx, obj, name, value) -> int:
    raise NotImplementedError(HPy_SetAttr)

@API.func()  # int HPy_SetAttr_s(HPyContext ctx, HPy obj, const char *name, HPy value)
def HPy_SetAttr_s(ctx, obj, name, value) -> int:
    raise NotImplementedError(HPy_SetAttr_s)

@API.func()  # HPy HPy_GetItem(HPyContext ctx, HPy obj, HPy key)
def HPy_GetItem(ctx, obj, key) -> int:
    raise NotImplementedError(HPy_GetItem)

@API.func()  # HPy HPy_GetItem_i(HPyContext ctx, HPy obj, HPy_ssize_t idx)
def HPy_GetItem_i(ctx, obj, idx) -> int:
    raise NotImplementedError(HPy_GetItem_i)

@API.func()  # HPy HPy_GetItem_s(HPyContext ctx, HPy obj, const char *key)
def HPy_GetItem_s(ctx, obj, key) -> int:
    raise NotImplementedError(HPy_GetItem_s)

@API.func()  # int HPy_SetItem(HPyContext ctx, HPy obj, HPy key, HPy value)
def HPy_SetItem(ctx, obj, key, value) -> int:
    raise NotImplementedError(HPy_SetItem)

@API.func()  # int HPy_SetItem_i(HPyContext ctx, HPy obj, HPy_ssize_t idx, HPy value)
def HPy_SetItem_i(ctx, obj, idx, value) -> int:
    raise NotImplementedError(HPy_SetItem_i)

@API.func()  # int HPy_SetItem_s(HPyContext ctx, HPy obj, const char *key, HPy value)
def HPy_SetItem_s(ctx, obj, key, value) -> int:
    raise NotImplementedError(HPy_SetItem_s)

@API.func()  # void *_HPy_Cast(HPyContext ctx, HPy h)
def _HPy_Cast(ctx, h) -> int:
    raise NotImplementedError(_HPy_Cast)

@API.func()  # HPy _HPy_New(HPyContext ctx, HPy h_type, void **data)
def _HPy_New(ctx, h_type, data) -> int:
    raise NotImplementedError(_HPy_New)

@API.func()  # HPy HPy_Repr(HPyContext ctx, HPy obj)
def HPy_Repr(ctx, obj) -> int:
    raise NotImplementedError(HPy_Repr)

@API.func()  # HPy HPy_Str(HPyContext ctx, HPy obj)
def HPy_Str(ctx, obj) -> int:
    raise NotImplementedError(HPy_Str)

@API.func()  # HPy HPy_ASCII(HPyContext ctx, HPy obj)
def HPy_ASCII(ctx, obj) -> int:
    raise NotImplementedError(HPy_ASCII)

@API.func()  # HPy HPy_Bytes(HPyContext ctx, HPy obj)
def HPy_Bytes(ctx, obj) -> int:
    raise NotImplementedError(HPy_Bytes)

@API.func()  # HPy HPy_RichCompare(HPyContext ctx, HPy v, HPy w, int op)
def HPy_RichCompare(ctx, v, w, op) -> int:
    raise NotImplementedError(HPy_RichCompare)

@API.func()  # int HPy_RichCompareBool(HPyContext ctx, HPy v, HPy w, int op)
def HPy_RichCompareBool(ctx, v, w, op) -> int:
    raise NotImplementedError(HPy_RichCompareBool)

@API.func()  # HPy_hash_t HPy_Hash(HPyContext ctx, HPy obj)
def HPy_Hash(ctx, obj) -> int:
    raise NotImplementedError(HPy_Hash)

@API.func()  # int HPyBytes_Check(HPyContext ctx, HPy h)
def HPyBytes_Check(ctx, h) -> int:
    raise NotImplementedError(HPyBytes_Check)

@API.func()  # HPy_ssize_t HPyBytes_Size(HPyContext ctx, HPy h)
def HPyBytes_Size(ctx, h) -> int:
    raise NotImplementedError(HPyBytes_Size)

@API.func()  # HPy_ssize_t HPyBytes_GET_SIZE(HPyContext ctx, HPy h)
def HPyBytes_GET_SIZE(ctx, h) -> int:
    raise NotImplementedError(HPyBytes_GET_SIZE)

@API.func()  # char *HPyBytes_AsString(HPyContext ctx, HPy h)
def HPyBytes_AsString(ctx, h) -> int:
    raise NotImplementedError(HPyBytes_AsString)

@API.func()  # char *HPyBytes_AS_STRING(HPyContext ctx, HPy h)
def HPyBytes_AS_STRING(ctx, h) -> int:
    raise NotImplementedError(HPyBytes_AS_STRING)

@API.func()  # HPy HPyBytes_FromString(HPyContext ctx, const char *v)
def HPyBytes_FromString(ctx, v) -> int:
    raise NotImplementedError(HPyBytes_FromString)

@API.func()  # HPy HPyBytes_FromStringAndSize(HPyContext ctx, const char *v, HPy_ssize_t len)
def HPyBytes_FromStringAndSize(ctx, v, len) -> int:
    raise NotImplementedError(HPyBytes_FromStringAndSize)

@API.func()  # HPy HPyUnicode_FromString(HPyContext ctx, const char *utf8)
def HPyUnicode_FromString(ctx, utf8) -> int:
    raise NotImplementedError(HPyUnicode_FromString)

@API.func()  # int HPyUnicode_Check(HPyContext ctx, HPy h)
def HPyUnicode_Check(ctx, h) -> int:
    raise NotImplementedError(HPyUnicode_Check)

@API.func()  # HPy HPyUnicode_AsUTF8String(HPyContext ctx, HPy h)
def HPyUnicode_AsUTF8String(ctx, h) -> int:
    raise NotImplementedError(HPyUnicode_AsUTF8String)

@API.func()  # HPy HPyUnicode_FromWideChar(HPyContext ctx, const wchar_t *w, HPy_ssize_t size)
def HPyUnicode_FromWideChar(ctx, w, size) -> int:
    raise NotImplementedError(HPyUnicode_FromWideChar)

@API.func()  # int HPyList_Check(HPyContext ctx, HPy h)
def HPyList_Check(ctx, h) -> int:
    raise NotImplementedError(HPyList_Check)

@API.func()  # HPy HPyList_New(HPyContext ctx, HPy_ssize_t len)
def HPyList_New(ctx, len) -> int:
    raise NotImplementedError(HPyList_New)

@API.func()  # int HPyList_Append(HPyContext ctx, HPy h_list, HPy h_item)
def HPyList_Append(ctx, h_list, h_item) -> int:
    raise NotImplementedError(HPyList_Append)

@API.func()  # int HPyDict_Check(HPyContext ctx, HPy h)
def HPyDict_Check(ctx, h) -> int:
    raise NotImplementedError(HPyDict_Check)

@API.func()  # HPy HPyDict_New(HPyContext ctx)
def HPyDict_New(ctx) -> int:
    raise NotImplementedError(HPyDict_New)

@API.func()  # void HPy_FatalError(HPyContext ctx, const char *message)
def HPy_FatalError(ctx, message) -> None:
    raise NotImplementedError(HPy_FatalError)

@API.func()  # HPy HPyTuple_FromArray(HPyContext ctx, HPy items[], HPy_ssize_t n)
def HPyTuple_FromArray(ctx, items, n) -> int:
    raise NotImplementedError(HPyTuple_FromArray)

@API.func()  # HPy HPy_FromPyObject(HPyContext ctx, cpy_PyObject *obj)
def HPy_FromPyObject(ctx, obj) -> int:
    raise NotImplementedError(HPy_FromPyObject)

@API.func()  # cpy_PyObject *HPy_AsPyObject(HPyContext ctx, HPy h)
def HPy_AsPyObject(ctx, h) -> int:
    raise NotImplementedError(HPy_AsPyObject)

@API.func()  # void _HPy_CallRealFunctionFromTrampoline(HPyContext ctx, HPyFunc_Signature sig, void *func, void *args)
def _HPy_CallRealFunctionFromTrampoline(ctx, sig, func, args) -> None:
    raise NotImplementedError(_HPy_CallRealFunctionFromTrampoline)

@API.func()  # void _HPy_CallDestroyAndThenDealloc(HPyContext ctx, void *func, cpy_PyObject *self)
def _HPy_CallDestroyAndThenDealloc(ctx, func, self) -> None:
    raise NotImplementedError(_HPy_CallDestroyAndThenDealloc)

@API.func()  # HPyListBuilder HPyListBuilder_New(HPyContext ctx, HPy_ssize_t initial_size)
def HPyListBuilder_New(ctx, initial_size) -> int:
    raise NotImplementedError(HPyListBuilder_New)

@API.func()  # void HPyListBuilder_Set(HPyContext ctx, HPyListBuilder builder, HPy_ssize_t index, HPy h_item)
def HPyListBuilder_Set(ctx, builder, index, h_item) -> None:
    raise NotImplementedError(HPyListBuilder_Set)

@API.func()  # HPy HPyListBuilder_Build(HPyContext ctx, HPyListBuilder builder)
def HPyListBuilder_Build(ctx, builder) -> int:
    raise NotImplementedError(HPyListBuilder_Build)

@API.func()  # void HPyListBuilder_Cancel(HPyContext ctx, HPyListBuilder builder)
def HPyListBuilder_Cancel(ctx, builder) -> None:
    raise NotImplementedError(HPyListBuilder_Cancel)

@API.func()  # HPyTupleBuilder HPyTupleBuilder_New(HPyContext ctx, HPy_ssize_t initial_size)
def HPyTupleBuilder_New(ctx, initial_size) -> int:
    raise NotImplementedError(HPyTupleBuilder_New)

@API.func()  # void HPyTupleBuilder_Set(HPyContext ctx, HPyTupleBuilder builder, HPy_ssize_t index, HPy h_item)
def HPyTupleBuilder_Set(ctx, builder, index, h_item) -> None:
    raise NotImplementedError(HPyTupleBuilder_Set)

@API.func()  # HPy HPyTupleBuilder_Build(HPyContext ctx, HPyTupleBuilder builder)
def HPyTupleBuilder_Build(ctx, builder) -> int:
    raise NotImplementedError(HPyTupleBuilder_Build)

@API.func()  # void HPyTupleBuilder_Cancel(HPyContext ctx, HPyTupleBuilder builder)
def HPyTupleBuilder_Cancel(ctx, builder) -> None:
    raise NotImplementedError(HPyTupleBuilder_Cancel)

@API.func()  # HPyTracker HPyTracker_New(HPyContext ctx, HPy_ssize_t size)
def HPyTracker_New(ctx, size) -> int:
    raise NotImplementedError(HPyTracker_New)

@API.func()  # int HPyTracker_Add(HPyContext ctx, HPyTracker ht, HPy h)
def HPyTracker_Add(ctx, ht, h) -> int:
    raise NotImplementedError(HPyTracker_Add)

@API.func()  # void HPyTracker_ForgetAll(HPyContext ctx, HPyTracker ht)
def HPyTracker_ForgetAll(ctx, ht) -> None:
    raise NotImplementedError(HPyTracker_ForgetAll)

@API.func()  # void HPyTracker_Close(HPyContext ctx, HPyTracker ht)
def HPyTracker_Close(ctx, ht) -> None:
    raise NotImplementedError(HPyTracker_Close)

